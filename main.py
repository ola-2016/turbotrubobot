# main.py
import logging
import tensorflow as tf
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
import numpy as np
from PIL import Image
import io
import os
import datetime

tf.config.run_functions_eagerly(True)
tf.data.experimental.enable_debug_mode()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
INPUT_SIZE = (150, 150)
NORMALIZATION = 1.0 / 255
THRESHOLD = 0.5
DATA_DIR = "training_data"
MODEL_PATH = "pipe_damaged_model.h5"
ADMIN_USER_ID = 1235678
YOUR_TOKEN = 123456

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = tf.keras.models.load_model(MODEL_PATH)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
os.makedirs(DATA_DIR, exist_ok=True)


def process_image(image):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏"""
    image = image.resize(INPUT_SIZE)
    image = np.array(image) * NORMALIZATION
    if image.ndim == 2:
        image = np.stack((image,) * 3, axis=-1)
    return np.expand_dims(image, axis=0)


async def ask_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE, prediction: str):
    """–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="correct"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="wrong")]
    ]
    await update.message.reply_text(
        text=f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {prediction}\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä—É–±—ã?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()

    user_data = context.user_data
    if 'last_image' in user_data and 'last_prediction' in user_data:
        is_correct = query.data == "correct"
        await save_feedback(user_data['last_image'], is_correct, user_data['last_prediction'])
        await query.edit_message_text(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")

        if len(os.listdir(DATA_DIR)) >= 10:
            await retrain_model()
    else:
        await query.edit_message_text(text="–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


async def save_feedback(image: Image.Image, is_correct: bool, prediction: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    timestamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤
    class_folder = "correct" if is_correct else "wrong"
    class_dir = os.path.join(DATA_DIR, class_folder)
    os.makedirs(class_dir, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    filename = os.path.join(class_dir, f"{timestamp}.png")
    image.save(filename)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–ª–∞—Å—Å–∞
    with open(os.path.join(DATA_DIR, "metadata.csv"), "a", encoding="utf-8") as f:
        f.write(f"{filename},{class_folder},{prediction}\n")


async def retrain_model(force=False):
    """–î–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
        class_dirs = ["correct", "wrong"]
        total_images = sum(
            [len(os.listdir(os.path.join(DATA_DIR, cls))) for cls in class_dirs]
        )
        if total_images == 0:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–¥–µ–ª–∏
        model = tf.keras.models.load_model(MODEL_PATH)
        model.compile(
            optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
            loss='binary_crossentropy',
            metrics=['accuracy']
        )

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)
        train_generator = train_datagen.flow_from_directory(
            DATA_DIR,
            classes=class_dirs,
            target_size=INPUT_SIZE,
            batch_size=32,
            class_mode='binary'
        )

        # –î–æ–æ–±—É—á–µ–Ω–∏–µ
        model.fit(
            train_generator,
            epochs=3,
            verbose=1
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model.save(MODEL_PATH)
        logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–æ–±—É—á–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è: {str(e)}")
        raise

async def force_retrain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if update.effective_user.id != ADMIN_USER_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é")
            return

        await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è...")
        await retrain_model(force=True)
        await update.message.reply_text("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞!")

    except ValueError as ve:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(ve)}")
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")

async def handle_retrain_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        await query.edit_message_text("üîÑ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è...")
        await retrain_model(force=True)
        await query.edit_message_text("‚úÖ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = io.BytesIO()
        await photo_file.download_to_memory(out=photo_bytes)
        image = Image.open(photo_bytes)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['last_image'] = image
        prediction = model.predict(process_image(image), verbose=0)[0][0]
        result = "–Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞" if prediction > THRESHOLD else "–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞"
        context.user_data['last_prediction'] = result

        await update.message.reply_text(f"–í–∞—à–∞ —Ç—Ä—É–±–∞ {result}")
        await ask_feedback(update, context, result)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")


async def start(update: Update, context) -> None:
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ç—Ä—É–±—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.')


def main() -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
    if not os.path.exists(MODEL_PATH):
        raise FileNotFoundError(f"–ú–æ–¥–µ–ª—å {MODEL_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    os.makedirs(os.path.join(DATA_DIR, "correct"), exist_ok=True)
    os.makedirs(os.path.join(DATA_DIR, "wrong"), exist_ok=True)
    application = Application.builder().token(f"{YOUR_TOKEN}").build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("retrain", force_retrain))
    application.add_handler(MessageHandler(filters.PHOTO, handle_image))
    application.add_handler(CallbackQueryHandler(handle_feedback))
    application.add_handler(CallbackQueryHandler(handle_retrain_confirmation, pattern="^confirm_retrain$"))
    application.run_polling()


if __name__ == '__main__':
    main()
